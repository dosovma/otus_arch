// Code generated by MockGen. DO NOT EDIT.
// Source: change_velocity.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIChangeVelocity is a mock of IChangeVelocity interface.
type MockIChangeVelocity struct {
	ctrl     *gomock.Controller
	recorder *MockIChangeVelocityMockRecorder
}

// MockIChangeVelocityMockRecorder is the mock recorder for MockIChangeVelocity.
type MockIChangeVelocityMockRecorder struct {
	mock *MockIChangeVelocity
}

// NewMockIChangeVelocity creates a new mock instance.
func NewMockIChangeVelocity(ctrl *gomock.Controller) *MockIChangeVelocity {
	mock := &MockIChangeVelocity{ctrl: ctrl}
	mock.recorder = &MockIChangeVelocityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChangeVelocity) EXPECT() *MockIChangeVelocityMockRecorder {
	return m.recorder
}

// ChangeVelocity mocks base method.
func (m *MockIChangeVelocity) ChangeVelocity() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeVelocity")
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeVelocity indicates an expected call of ChangeVelocity.
func (mr *MockIChangeVelocityMockRecorder) ChangeVelocity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeVelocity", reflect.TypeOf((*MockIChangeVelocity)(nil).ChangeVelocity))
}

// IsMovable mocks base method.
func (m *MockIChangeVelocity) IsMovable() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMovable")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMovable indicates an expected call of IsMovable.
func (mr *MockIChangeVelocityMockRecorder) IsMovable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMovable", reflect.TypeOf((*MockIChangeVelocity)(nil).IsMovable))
}
