// Code generated by MockGen. DO NOT EDIT.
// Source: queue.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pkg "github.com/dosovma/otus_arch/pkg"
	gomock "github.com/golang/mock/gomock"
)

// MockExecutable is a mock of Executable interface.
type MockExecutable struct {
	ctrl     *gomock.Controller
	recorder *MockExecutableMockRecorder
}

// MockExecutableMockRecorder is the mock recorder for MockExecutable.
type MockExecutableMockRecorder struct {
	mock *MockExecutable
}

// NewMockExecutable creates a new mock instance.
func NewMockExecutable(ctrl *gomock.Controller) *MockExecutable {
	mock := &MockExecutable{ctrl: ctrl}
	mock.recorder = &MockExecutableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutable) EXPECT() *MockExecutableMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockExecutable) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockExecutableMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutable)(nil).Execute))
}

// MockIQueue is a mock of IQueue interface.
type MockIQueue struct {
	ctrl     *gomock.Controller
	recorder *MockIQueueMockRecorder
}

// MockIQueueMockRecorder is the mock recorder for MockIQueue.
type MockIQueueMockRecorder struct {
	mock *MockIQueue
}

// NewMockIQueue creates a new mock instance.
func NewMockIQueue(ctrl *gomock.Controller) *MockIQueue {
	mock := &MockIQueue{ctrl: ctrl}
	mock.recorder = &MockIQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueue) EXPECT() *MockIQueueMockRecorder {
	return m.recorder
}

// Pull mocks base method.
func (m *MockIQueue) Pull() (pkg.Executable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull")
	ret0, _ := ret[0].(pkg.Executable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockIQueueMockRecorder) Pull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockIQueue)(nil).Pull))
}

// Push mocks base method.
func (m *MockIQueue) Push(e pkg.Executable) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", e)
}

// Push indicates an expected call of Push.
func (mr *MockIQueueMockRecorder) Push(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockIQueue)(nil).Push), e)
}
